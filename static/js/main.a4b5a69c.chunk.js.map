{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","title","type","id","onClick","toggleMode","htmlFor","TextForm","handlewordcnt","a","newstr","trim","str","i","length","charAt","setwordcnt","split","useState","text","setText","wordcnt","style","color","heading","backgroundColor","rows","onChange","event","console","log","document","getElementById","value","target","newText","toUpperCase","showAlert","toLowerCase","select","navigator","clipboard","writeText","Alert","alert","role","msg","prototype","PropTypes","string","abouttext","defaultProps","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a4b5a69c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function NavBar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <span className=\"navbar-brand\">{props.title}</span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li> */}\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.abouttext}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${(props.mode==='light'?'dark':'light')}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n        </nav>\r\n            )\r\n}\r\n            NavBar.prototype = {\r\n                title: PropTypes.string,\r\n            abouttext: PropTypes.string,\r\n}\r\n            NavBar.defaultProps = {\r\n                title: \"set title here\",\r\n            abouttext: \"set about text here.\",\r\n}\r\n// NavBar.prototype = {\r\n//     title: PropTypes.string.isRequired,\r\n//     abouttext: PropTypes.string.isRequired,\r\n// }","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleupclick = () => {\r\n        console.log(\"upper case was clicked..\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"CONVERTED TO UPPER CASE..\",\"success\");\r\n        // setText(\"you have clicked handle up \");\r\n    };\r\n\r\n\r\n    const handlelowclick = () => {\r\n        console.log(\"lower case was clicked..\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"CONVERTED TO LOWER CASE..\",\"success\");\r\n    };\r\n\r\n\r\n    const handleclear = () => {\r\n        setText(\"\");\r\n        setwordcnt(0);\r\n        props.showAlert(\"CLEARED THE SPACE...\",\"success\");\r\n    };\r\n\r\n\r\n    const handleonchange = (event) => {\r\n        console.log(\"upper case was clicked..\");\r\n        handlewordcnt(document.getElementById(\"myBox\").value);\r\n        setText(event.target.value);\r\n        \r\n    };\r\n\r\n    const handlecopy=() =>{\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"COPIED TO CLIPBOARD..\",\"success\");\r\n    };\r\n\r\n    const handleextraspace=() =>{\r\n        var newstr=\"\";\r\n        for(var i=0;i<text.length;i++)\r\n        {\r\n            if(text.charAt(i)===' '&&text.charAt(i+1)!==' ')\r\n            {\r\n                newstr+=text.charAt(i);\r\n            }\r\n            else\r\n            {\r\n                if(text.charAt(i)!==' ')\r\n                newstr+=text.charAt(i);\r\n            }\r\n        }\r\n        setText(newstr.trim());\r\n        props.showAlert(\"EXTRA SPACES HAVE BEEN REMOVED....\",\"success\");\r\n    }\r\n\r\n    const handlewordcnt=(a)=>{\r\n        var newstr=a.trim();\r\n        var str=\"\";\r\n        for(var i=0;i<newstr.length;i++)\r\n        {\r\n            if(newstr.charAt(i)===' '&&newstr.charAt(i+1)!==' ')\r\n            {\r\n                str+=newstr.charAt(i);\r\n            }\r\n            else\r\n            {\r\n                if(newstr.charAt(i)!==' ')\r\n                str+=newstr.charAt(i);\r\n            }\r\n        }\r\n        setwordcnt(str.split(\" \").length);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    const [wordcnt, setwordcnt] = useState(0);\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea style={{backgroundColor: props.mode==='light'?'white':'grey',color: props.mode==='dark'?'white':'black'}} className=\"form-control\" id=\"myBox\" rows=\"8\" onChange={handleonchange} value={text}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleupclick}>Convert to upper case</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handlelowclick}>Convert to lower case</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handlecopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleextraspace}>Extra Space</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleclear}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your Text Summry.</h2>\r\n                {/* <p>{(text.split(\" \").length)} words and {text.length} characters</p>\r\n                <p><b>{0.008 * (text.split(\" \").length)}</b> Minutes read</p> */}\r\n\r\n                <p>{wordcnt} words and {text.length} characters</p>\r\n                <p><b>{0.008 * wordcnt}</b> Minutes read</p>\r\n                <h2>Preview.</h2>\r\n                <p>{text.length>0?text:\"Enter something to preview here....\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// to change the state we have to use the setText method to do we cant direclty change the state of the variable text.","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                 <strong>{props.alert.type}</strong> :  {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport NavBar from './components/NavBar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');// whether dark mode is enabled or not.\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = \"#47306d\";\n      showAlert(\"Dark mode has been Enabled.\", \"success\");\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled.\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <NavBar title=\"TextAnalyzer by AYUSH SHARMA\" abouttext=\"About TextAnalyzer\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      {/* <Switch>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/\"> */}\n          <TextForm heading=\"ENTER TEXT TO ANALYZE BELOW\" mode={mode} showAlert={showAlert} />\n        {/* </Route>\n      </Switch>\n      </Router>\n      <About/> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}